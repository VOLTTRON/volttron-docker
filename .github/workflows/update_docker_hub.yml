name: Push Image to DockerHub CI

on:
  push:
    branches:
      - main

jobs:
  build:
    # The strategy allows customization of the build and allows matrixing the version of os and software
    # https://docs.github.com/en/free-pro-team@l.atest/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategy
    strategy:
      fail-fast: false
      matrix:
        # Each entry in the os and python-version matrix will be run so for the 3 x 4 there will be 12 jobs run
        os: [ ubuntu-18.04 ] # ubuntu-18.04, ubuntu-20.04 ]
        python-version: [ 3.6 ] # 3.7 , 3.8, 3.9 ]
    runs-on: ${{ matrix.os }}
    steps:
        - uses: actions/checkout@v2

        - name: Clone the submodule
          run: git submodule update --init --recursive

        # Ensure that the volttron-docker github repo has the username and token added from the
        # official Volttron Dockerhub page at https://hub.docker.com/r/volttron/volttron
        # On instructions how to do this, see https://docs.github.com/en/actions/guides/publishing-docker-images
        - name: Login to DockerHub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKER_HUB_USERNAME }}
            password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

        - name: Set up Docker Buildx
          id: buildx
          uses: docker/setup-buildx-action@v1

        - name: Cache Docker layers
          uses: actions/cache@v2
          with:
            path: /tmp/.buildx-cache
            key: ${{ runner.os }}-buildx-${{ github.sha }}
            restore-keys: |
              ${{ runner.os }}-buildx-

        - name: Build and push
          id: docker_build
          uses: docker/build-push-action@v2
          with:
            context: ./
            file: ./Dockerfile
            push: true
            tags: volttron/volttron:develop
            builder: ${{ steps.buildx.outputs.name }}
            cache-from: type=local,src=/tmp/.buildx-cache
            cache-to: type=local,dest=/tmp/.buildx-cache

        - name: Image digest
          run: echo ${{ steps.docker_build.outputs.digest }}